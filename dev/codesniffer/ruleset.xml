<?xml version="1.0"?>
<!DOCTYPE ruleset SYSTEM "ruleset.dtd">
<ruleset name="Dolibarr">
	<description>Dolibarr coding standard.</description>

	<exclude-pattern>*/conf.php</exclude-pattern>
	<exclude-pattern>*/includes/*</exclude-pattern>
	<exclude-pattern>*/documents/*</exclude-pattern>
	<exclude-pattern>*/custom/*</exclude-pattern>
	<exclude-pattern>*/nltechno*</exclude-pattern>
		
	<!-- MAIN RULES -->

    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2">
        <!-- Dolibarr uses tabs instead of spaces -->
        <exclude name="Generic.WhiteSpace.ScopeIndent"/>
        <exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
        <!-- Disallow warnings because of line length -->
        <exclude name="Generic.Files.LineLength" />
        <!-- Dolibarr does not follow namespaces yet... -->
        <exclude name="PSR1.Classes.ClassDeclaration" />
    </rule>

    <!-- Dolibarr uses tabs instead of spaces -->
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

    <!-- END MAIN RULES -->

    <!-- OTHER RULES -->

	<!-- Rules from Internal Standard -->
	
	<rule ref="Internal.NoCodeFound">
		<severity>0</severity>
	</rule>

	<!-- Rules for CodeAnalysis -->
		
	<rule ref="Generic.CodeAnalysis.EmptyStatement" />
	<rule ref="Generic.CodeAnalysis.EmptyStatement.NotAllowed">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.CodeAnalysis.EmptyStatement.NotAllowedWarning">
		<severity>0</severity>
	</rule>
    <!-- <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" /> -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found">
		<severity>0</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <!--
    <rule ref="Generic.Commenting.Todo" />
    -->

	<!-- Have 2 chars padding maximum and always show as errors -->
	<!--
		<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties> <property name="maxPadding" value="2"/> <property
		name="ignoreMultiLine" value="true"/> </properties> </rule>
	-->

	<rule ref="Generic.Formatting.SpaceAfterCast" />

    <rule ref="Generic.Functions.CallTimePassByReference" />

    <!-- Tweaks to metrics -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="80" />
            <property name="absoluteComplexity" value="200" />
        </properties>
    </rule>
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="10" />
            <property name="absoluteNestingLevel" value="50" />
        </properties>
    </rule>

	<rule ref="Generic.NamingConventions.ConstructorName" />
	<!-- Check if we use PHP4 constructor instead of __construct() -->
	<rule ref="Generic.NamingConventions.ConstructorName.OldStyle">
        <severity>0</severity>
	</rule>

    <rule ref="Generic.PHP.DeprecatedFunctions" />
    <rule ref="Generic.PHP.DeprecatedFunctions.Deprecated">
        <severity>0</severity>
    </rule>

    <rule ref="Generic.PHP.ForbiddenFunctions" />

    <!-- Warning when using @ before functions -->
    <!-- <rule ref="Generic.PHP.NoSilencedErrors" /> -->

	<rule ref="Generic.Strings.UnnecessaryStringConcat" />

	<rule ref="Generic.Strings.UnnecessaryStringConcat.Found">
        <severity>0</severity>
	</rule>
    
    <rule ref="Generic.VersionControl.SubversionProperties" />

	<!-- Rules from PEAR Standard -->

	<rule ref="PEAR.Classes.ClassDeclaration" />

    <!-- Check for duplicate class names -->
    <!-- <rule ref="Generic.Classes.DuplicateClassName" /> -->

    <rule ref="PEAR.Commenting.ClassComment" />
    <rule ref="PEAR.Commenting.ClassComment.MissingTag">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.WrongStyle">
        <severity>0</severity>
    </rule>
    
    <rule ref="PEAR.Commenting.FunctionComment.Empty">
        <severity>5</severity>
    </rule>
    
    <rule ref="PEAR.Commenting.FunctionComment" />
    <rule ref="PEAR.Commenting.FunctionComment.SpacingBeforeParamType">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.SpacingAfterLongType">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.SpacingAfterLongName">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.SpacingAfterParams">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.ParameterCommentsNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Commenting.FunctionComment.ParameterNamesNotAligned">
        <severity>0</severity>
    </rule>

    <rule ref="PEAR.Commenting.InlineComment" />

	<!-- Test if () are removed for includes -->
	<!-- <rule ref="PEAR.Files.IncludingFile"/> -->
	<rule ref="PEAR.Formatting.MultiLineAssignment" />
	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent" />
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace.Line">
        <severity>0</severity>
    </rule>

    <!-- END OTHERÂ RULES -->
</ruleset>
